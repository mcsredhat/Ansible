### 1. **File Management**

#### Example 1.1: `file` module
This task ensures that a directory exists and sets its permissions.

yaml
---
- name: File Management with file module
  hosts: localhost
  tasks:
    - name: Ensure the directory /tmp/mydir exists
      file:
        path: /tmp/mydir
        state: directory
        mode: '0755'

#### Example 1.2: `copy` module
This task copies a file from the control node to the managed host.

yaml
---
- name: File Management with copy module
  hosts: localhost
  tasks:
    - name: Copy a file to the remote server
      copy:
        src: /path/to/local/file.txt
        dest: /tmp/file.txt
        mode: '0644'

#### Example 1.3: `fetch` module
This task retrieves a file from the managed host and stores it on the control node.

yaml
---
- name: File Management with fetch module
  hosts: localhost
  tasks:
    - name: Fetch a file from the remote server
      fetch:
        src: /tmp/file.txt
        dest: /path/to/store/file.txt


#### Example 1.4: `lineinfile` module
This task ensures a line is present in a configuration file.

yaml
---
- name: File Management with lineinfile module
  hosts: localhost
  tasks:
    - name: Ensure the line exists in /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "PermitRootLogin no"
        state: present

#### Example 1.5: `template` module
This task copies a Jinja2 template to the managed host.

yaml
---
- name: File Management with template module
  hosts: localhost
  tasks:
    - name: Deploy an Apache virtual host configuration from template
      template:
        src: /path/to/template/vhost.j2
        dest: /etc/httpd/conf.d/vhost.conf


#### Example 1.6: `blockinfile` module
This task inserts a block of text into a file.

yaml
---
- name: File Management with blockinfile module
  hosts: localhost
  tasks:
    - name: Insert a block of configuration into /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |
          192.168.1.10 webserver
          192.168.1.11 dbserver

### 2. **Package Management**

#### Example 2.1: `apt` module
This task installs a package on Debian-based systems.

yaml
---
- name: Package Management with apt module
  hosts: debian
  tasks:
    - name: Install the Apache package
      apt:
        name: apache2
        state: present

#### Example 2.2: `yum` module
This task installs a package on Red Hat-based systems.

yaml
---
- name: Package Management with yum module
  hosts: rhel
  tasks:
    - name: Install the nginx package
      yum:
        name: nginx
        state: present

#### Example 2.3: `dnf` module
This task uses DNF (newer package manager for Red Hat/CentOS/Fedora) to install a package.

yaml
---
- name: Package Management with dnf module
  hosts: fedora
  tasks:
    - name: Install the MariaDB package
      dnf:
        name: mariadb-server
        state: present
#### Example 2.4: `package` module
This task is an abstraction that works across different platforms and package managers.

yaml
---
- name: Cross-platform Package Management with package module
  hosts: all
  tasks:
    - name: Install the Git package using the appropriate package manager
      package:
        name: git
        state: present

### 3. **Service Management**

#### Example 3.1: `service` module
This task ensures that a service is running (works across different init systems).

yaml
---
- name: Service Management with service module
  hosts: all
  tasks:
    - name: Ensure Apache is running
      service:
        name: apache2
        state: started
        enabled: yes

#### Example 3.2: `systemd` module
This task manages services with `systemd`, including more advanced options.

yaml
---
- name: Service Management with systemd module
  hosts: all
  tasks:
    - name: Start and enable the nginx service using systemd
      systemd:
        name: nginx
        state: started
        enabled: yes

#### Example 3.3: `supervisord` module
This task manages processes using Supervisor.

yaml
---
- name: Service Management with supervisord module
  hosts: all
  tasks:
    - name: Restart a program managed by Supervisor
      supervisord:
        name: my_program
        state: restarted

### 4. **User and Group Management**

#### Example 4.1: `user` module
This task creates a new user on the managed host.

yaml
---
- name: User Management with user module
  hosts: all
  tasks:
    - name: Create a new user named 'john'
      user:
        name: john
        shell: /bin/bash
        state: present

#### Example 4.2: `group` module
This task creates a new group on the managed host.

yaml
---
- name: Group Management with group module
  hosts: all
  tasks:
    - name: Create a new group named 'developers'
      group:
        name: developers
        state: present
#### Example 4.3: Adding a user to a group
This task ensures that the user is added to a specific group.

yaml
---
- name: Add User to Group Example
  hosts: all
  tasks:
    - name: Add user 'john' to the 'developers' group
      user:
        name: john
        groups: developers
        append: yes
### **Security Modules**

### 1. **SSL Certificate Management**

#### Example 1.1: `openssl_certificate` module
This task generates a self-signed SSL certificate using the `openssl_certificate` module.

yaml
---
- name: SSL Certificate Management with openssl_certificate module
  hosts: localhost
  tasks:
    - name: Generate a self-signed SSL certificate
      openssl_certificate:
        path: /etc/ssl/certs/my_cert.pem
        privatekey_path: /etc/ssl/private/my_key.pem
        csr_path: /etc/ssl/csr/my_csr.pem
        provider: selfsigned
        subject:
          commonName: example.com
        validity_end: "2031-12-31T23:59:59Z"
### 2. **Firewall Management**

#### Example 2.1: `ufw` module
This task configures `ufw` (Uncomplicated Firewall) on a Debian-based system.

yaml
---
- name: Firewall Management with ufw module
  hosts: localhost
  tasks:
    - name: Allow SSH connections
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Allow HTTP traffic
      ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled
#### Example 2.2: `firewalld` module
This task configures `firewalld` on a Red Hat-based system.

yaml
---
- name: Firewall Management with firewalld module
  hosts: localhost
  tasks:
    - name: Open HTTP and HTTPS ports in the firewall
      firewalld:
        service: http
        zone: public
        permanent: yes
        state: enabled

    - name: Open HTTPS port
      firewalld:
        service: https
        zone: public
        permanent: yes
        state: enabled

    - name: Reload firewalld
      firewalld:
        state: reloaded
#### Example 2.3: `iptables` module
This task adds an iptables rule to allow incoming traffic on port 80.

yaml
---
- name: Firewall Management with iptables module
  hosts: localhost
  tasks:
    - name: Allow incoming traffic on port 80
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 80
        jump: ACCEPT

    - name: Save the iptables rules
      command: iptables-save > /etc/iptables/rules.v4
### 3. **Key Management**

#### Example 3.1: `authorized_key` module
This task adds a public SSH key to a user's `~/.ssh/authorized_keys` file for passwordless SSH authentication.

yaml
---
- name: Key Management with authorized_key module
  hosts: all
  tasks:
    - name: Add public key to authorized_keys
      authorized_key:
        user: john
        key: "ssh-rsa AAAAB3Nz... user@host"
        state: present
#### Example 3.2: `ssh_keypair` module
This task generates an SSH key pair (public and private keys).

yaml
---
- name: Key Management with ssh_keypair module
  hosts: localhost
  tasks:
    - name: Generate SSH key pair
      ssh_keypair:
        path: /home/john/.ssh/id_rsa
        type: rsa
        size: 2048
        force: yes
### **Database Modules**

### 1. **MySQL Management**

#### Example 1.1: `mysql_db` module
This task creates a MySQL database.

yaml
---
- name: MySQL Database Management with mysql_db module
  hosts: dbserver
  tasks:
    - name: Create a MySQL database
      mysql_db:
        name: exampledb
        state: present
        login_user: root
        login_password: root_password
#### Example 1.2: `mysql_user` module
This task creates a MySQL user and grants privileges.

yaml
---
- name: MySQL User Management with mysql_user module
  hosts: dbserver
  tasks:
    - name: Create a MySQL user and grant privileges
      mysql_user:
        name: exampleuser
        password: secure_password
        priv: "exampledb.*:ALL"
        state: present
        login_user: root
        login_password: root_password
### 2. **PostgreSQL Management**

#### Example 2.1: `postgresql_db` module
This task creates a PostgreSQL database.

yaml
---
- name: PostgreSQL Database Management with postgresql_db module
  hosts: dbserver
  tasks:
    - name: Create a PostgreSQL database
      postgresql_db:
        name: exampledb
        state: present
        login_user: postgres
        login_password: postgres_password
#### Example 2.2: `postgresql_user` module
This task creates a PostgreSQL user and grants it privileges.

yaml
---
- name: PostgreSQL User Management with postgresql_user module
  hosts: dbserver
  tasks:
    - name: Create a PostgreSQL user and grant privileges
      postgresql_user:
        name: exampleuser
        password: secure_password
        db: exampledb
        priv: "ALL"
        state: present
        login_user: postgres
        login_password: postgres_password
### 3. **MongoDB Management**

#### Example 3.1: `mongodb_user` module
This task creates a MongoDB user with database-specific privileges.

yaml
---
- name: MongoDB User Management with mongodb_user module
  hosts: dbserver
  tasks:
    - name: Create a MongoDB user
      mongodb_user:
        database: exampledb
        name: exampleuser
        password: secure_password
        roles:
          - readWrite
        state: present
        login_user: admin
        login_password: admin_password
#### Example 3.2: `mongodb_db` module
This task creates a MongoDB database.

yaml
---
- name: MongoDB Database Management with mongodb_db module
  hosts: dbserver
  tasks:
    - name: Create a MongoDB database
      mongodb_db:
        name: exampledb
        state: present
        login_user: admin
        login_password: admin_password
### 4. **Microsoft SQL Server Management**

#### Example 4.1: `win_mssql_db` module
This task creates a Microsoft SQL Server database.

yaml
---
- name: MS SQL Database Management with win_mssql_db module
  hosts: windows
  tasks:
    - name: Create a SQL Server database
      win_mssql_db:
        name: exampledb
        state: present
        login_user: sa
        login_password: sa_password
#### Example 4.2: `win_mssql_user` module
This task creates a SQL Server user and assigns it permissions.

yaml
---
- name: MS SQL User Management with win_mssql_user module
  hosts: windows
  tasks:
    - name: Create a SQL Server user and grant permissions
      win_mssql_user:
        name: exampleuser
        password: secure_password
        login_user: sa
        login_password: sa_password
        permissions:
          - "CONNECT"
          - "SELECT"
        state: present
### **Storage Modules**

### 1. **Filesystem Management**

#### Example 1.1: `mount` module for Local Filesystems
This task mounts a filesystem at boot.

yaml
---
- name: Filesystem Management with mount module
  hosts: localhost
  tasks:
    - name: Mount the /dev/sdb1 partition to /mnt/data
      mount:
        path: /mnt/data
        src: /dev/sdb1
        fstype: ext4
        state: mounted
        opts: defaults
#### Example 1.2: `filesystem` module
This task creates an ext4 filesystem on a new disk partition.

yaml
---
- name: Filesystem Management with filesystem module
  hosts: localhost
  tasks:
    - name: Create ext4 filesystem on /dev/sdb1
      filesystem:
        fstype: ext4
        dev: /dev/sdb1
### 2. **LVM (Logical Volume Management)**

#### Example 2.1: `lvol` module
This task creates a logical volume on an LVM volume group.

yaml
---
- name: LVM Management with lvol module
  hosts: localhost
  tasks:
    - name: Create a volume group on /dev/sdb
      lvol:
        vg: vg_data
        lv: lv_data
        size: 10g
        state: present

    - name: Create ext4 filesystem on the new logical volume
      filesystem:
        fstype: ext4
        dev: /dev/vg_data/lv_data
### 3. **NFS and CIFS Management**

#### Example 3.1: `mount` module for NFS
This task mounts an NFS share on a client machine.

yaml
---
- name: NFS Share Mounting with mount module
  hosts: localhost
  tasks:
    - name: Mount NFS share from the server
      mount:
        path: /mnt/nfs_share
        src: nfs-server:/exports/nfs_share
        fstype: nfs
        opts: rw
        state: mounted
#### Example 3.2: `mount` module for CIFS (Samba)
This task mounts a CIFS (SMB) share on a client machine.

yaml
---
- name: CIFS Share Mounting with mount module
  hosts: localhost
  tasks:
    - name: Mount a CIFS share
      mount:
        path: /mnt/cifs_share
        src: "//server/share"
        fstype: cifs
        opts: username=guest,password=guest
        state: mounted
### 4. **Cloud Storage Management**

#### Example 4.1: `aws_s3` module for AWS S3 Storage
This task uploads a file to an AWS S3 bucket.

yaml
---
- name: AWS S3 Storage Management with aws_s3 module
  hosts: localhost
  tasks:
    - name: Upload a file to S3 bucket
      aws_s3:
        bucket: mybucket
        object: /backup/database_backup.sql
        src: /local/path/to/database_backup.sql
        mode: put
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
#### Example 4.2: `gcp_storage_bucket` module for Google Cloud Storage
This task creates a storage bucket in Google Cloud Platform (GCP).

yaml
---
- name: GCP Storage Bucket Management with gcp_storage_bucket module
  hosts: localhost
  tasks:
    - name: Create a GCP storage bucket
      gcp_storage_bucket:
        name: mybucket
        location: US
        storage_class: STANDARD
        project: my-gcp-project
        credentials_file: /path/to/credentials.json
### **Container Modules**

### 1. **Docker Management**

#### Example 1.1: `docker_container` module
This task creates and runs a Docker container.

yaml
---
- name: Docker Container Management with docker_container module
  hosts: localhost
  tasks:
    - name: Run an Nginx container
      docker_container:
        name: nginx_container
        image: nginx:latest
        ports:
          - "80:80"
        state: started
#### Example 1.2: `docker_image` module
This task pulls a Docker image from Docker Hub.

yaml
---
- name: Docker Image Management with docker_image module
  hosts: localhost
  tasks:
    - name: Pull the latest Redis image
      docker_image:
        name: redis
        tag: latest
        source: pull
#### Example 1.3: `docker_network` module
This task creates a custom Docker network.

yaml
---
- name: Docker Network Management with docker_network module
  hosts: localhost
  tasks:
    - name: Create a Docker network
      docker_network:
        name: my_custom_network
        state: present
### 2. **Kubernetes Management**

#### Example 2.1: `k8s` module
This task deploys a Kubernetes pod using a YAML manifest file.

yaml
---
- name: Kubernetes Pod Management with k8s module
  hosts: localhost
  tasks:
    - name: Deploy a Kubernetes pod
      k8s:
        state: present
        namespace: default
        definition: "{{ lookup('file', 'nginx-pod.yaml') }}"
#### Example 2.2: `k8s_facts` module
This task retrieves facts about Kubernetes objects.

yaml
---
- name: Kubernetes Facts Collection with k8s_facts module
  hosts: localhost
  tasks:
    - name: Get all pods in the default namespace
      k8s_facts:
        kind: Pod
        namespace: default

    - debug:
        msg: "{{ ansible_k8s_facts.resources | json_query('[*].metadata.name') }}"
### 3. **Podman Management**

#### Example 3.1: `podman_container` module
This task runs a container with Podman.

yaml
---
- name: Podman Container Management with podman_container module
  hosts: localhost
  tasks:
    - name: Run an Nginx container using Podman
      podman_container:
        name: nginx_podman
        image: nginx:latest
        state: started
        ports:
          - "8080:80"
#### Example 3.2: `podman_image` module
This task pulls a Podman image from a container registry.

yaml
---
- name: Podman Image Management with podman_image module
  hosts: localhost
  tasks:
    - name: Pull the latest MySQL image
      podman_image:
        name: mysql
        tag: latest
### **System Modules**

### 1. **Reboot Management**

#### Example 1.1: `reboot` module
This task reboots a system and waits for it to become available again.

yaml
---
- name: Reboot Management with reboot module
  hosts: all
  tasks:
    - name: Reboot the server
      reboot:
        msg: "Rebooting the server to apply updates."
        reboot_timeout: 600
### 2. **Process Management**

#### Example 2.1: `systemd` module
This task manages a service using `systemd`.

yaml
---
- name: Process Management with systemd module
  hosts: localhost
  tasks:
    - name: Ensure Nginx is running and enabled on boot
      systemd:
        name: nginx
        state: started
        enabled: yes
#### Example 2.2: `service` module
This task manages a service using the more generic `service` module, compatible with both `systemd` and other init systems.

yaml
---
- name: Process Management with service module
  hosts: localhost
  tasks:
    - name: Restart the Apache service
      service:
        name: apache2
        state: restarted
### 3. **Kernel Module Management**

#### Example 3.1: `modprobe` module
This task loads a kernel module into the running kernel.

yaml
---
- name: Kernel Module Management with modprobe module
  hosts: localhost
  tasks:
    - name: Load the dummy kernel module
      modprobe:
        name: dummy
        state: present
#### Example 3.2: `modprobe` module for removing a module
This task removes a kernel module from the running kernel.

yaml
---
- name: Remove Kernel Module with modprobe module
  hosts: localhost
  tasks:
    - name: Unload the dummy kernel module
      modprobe:
        name: dummy
        state: absent
### **Windows Modules**

### 1. **Windows Package Management**

#### Example 1.1: `win_chocolatey` module
This task installs a package using Chocolatey, a package manager for Windows.

yaml
---
- name: Windows Package Management with win_chocolatey module
  hosts: windows
  tasks:
    - name: Install Google Chrome using Chocolatey
      win_chocolatey:
        name: googlechrome
        state: present
#### Example 1.2: `win_package` module
This task installs a software package using the Windows Installer (MSI) or an executable installer.

yaml
---
- name: Windows Package Management with win_package module
  hosts: windows
  tasks:
    - name: Install Notepad++ using MSI
      win_package:
        name: Notepad++
        path: C:\path\to\notepad++.msi
        state: present
### 2. **Windows Service Management**

#### Example 2.1: `win_service` module
This task manages a Windows service (e.g., starting, stopping, or enabling a service).

yaml
---
- name: Windows Service Management with win_service module
  hosts: windows
  tasks:
    - name: Ensure the Windows Update service is running
      win_service:
        name: wuauserv
        state: started
        start_mode: auto
### 3. **Windows User and Group Management**

#### Example 3.1: `win_user` module
This task creates a new user on a Windows system.

yaml
---
- name: Windows User Management with win_user module
  hosts: windows
  tasks:
    - name: Create a new user named 'testuser'
      win_user:
        name: testuser
        password: SuperSecurePassword!
        state: present
#### Example 3.2: `win_group` module
This task creates a new user group.

yaml
---
- name: Windows Group Management with win_group module
  hosts: windows
  tasks:
    - name: Create a new group named 'testgroup'
      win_group:
        name: testgroup
        state: present
### 4. **Windows File Management**

#### Example 4.1: `win_copy` module
This task copies a file from the control machine to a Windows host.

yaml
---
- name: Windows File Management with win_copy module
  hosts: windows
  tasks:
    - name: Copy a file to the Windows server
      win_copy:
        src: C:\path\to\local\file.txt
        dest: C:\path\to\destination\file.txt
#### Example 4.2: `win_file` module
This task ensures a file or directory exists with the desired permissions.

yaml
---
- name: Ensure a directory exists with win_file module
  hosts: windows
  tasks:
    - name: Create a directory for logs
      win_file:
        path: C:\logs
        state: directory
        owner: Administrator
        group: Administrators
        mode: '0755'
### **Cloud Infrastructure as Code (IAC) Modules**

### 1. **Terraform Management**

#### Example 1.1: `terraform` module
This task manages Terraform resources using Ansible.

yaml
---
- name: Terraform Management with terraform module
  hosts: localhost
  tasks:
    - name: Initialize Terraform
      terraform:
        project_path: /path/to/terraform/configuration
        state: present
        command: init

    - name: Apply Terraform configuration
      terraform:
        project_path: /path/to/terraform/configuration
        state: present
        command: apply
        auto_approve: true
### 2. **AWS CloudFormation Management**

#### Example 2.1: `cloudformation` module
This task creates or updates an AWS CloudFormation stack.

yaml
---
- name: AWS CloudFormation Management with cloudformation module
  hosts: localhost
  tasks:
    - name: Create or update CloudFormation stack
      cloudformation:
        stack_name: my-stack
        state: present
        region: us-east-1
        template: /path/to/template.yaml
        parameters:
          InstanceType: t2.micro
          KeyName: my-key-pair
        capabilities:
          - CAPABILITY_IAM
### 3. **Google Deployment Manager Management**

#### Example 3.1: `gcp_deployment_manager` module
This task deploys resources using Google Cloud Deployment Manager.

yaml
---
- name: Google Deployment Manager Management with gcp_deployment_manager module
  hosts: localhost
  tasks:
    - name: Deploy a Google Cloud resource
      gcp_deployment_manager:
        project: my-gcp-project
        name: my-deployment
        config: /path/to/deployment-config.yaml
        state: present
### **Cloud Modules**

### 1. **AWS Management**

#### Example 1.1: `ec2` module
This task launches an EC2 instance in AWS.

yaml
---
- name: AWS EC2 Management with ec2 module
  hosts: localhost
  tasks:
    - name: Launch an EC2 instance
      ec2:
        key_name: my-key
        instance_type: t2.micro
        image: ami-12345678
        wait: yes
        region: us-east-1
        group: my-security-group
        count: 1
      register: ec2_instance

    - debug:
        msg: "Launched EC2 instance: {{ ec2_instance.instances[0].id }}"
#### Example 1.2: `s3` module
This task creates an S3 bucket.

yaml
---
- name: AWS S3 Management with s3 module
  hosts: localhost
  tasks:
    - name: Create an S3 bucket
      s3:
        bucket: my-bucket-name
        state: present
        region: us-east-1
### 2. **Azure Management**

#### Example 2.1: `azure_rm_virtualmachine` module
This task creates a virtual machine in Azure.

yaml
---
- name: Azure Virtual Machine Management with azure_rm_virtualmachine module
  hosts: localhost
  tasks:
    - name: Create an Azure VM
      azure_rm_virtualmachine:
        resource_group: myResourceGroup
        name: myVM
        vm_size: Standard_DS1_v2
        admin_username: azureuser
        admin_password: SuperSecurePassword123!
        image: UbuntuLTS
        state: present
#### Example 2.2: `azure_rm_networkinterface` module
This task creates a network interface in Azure.

yaml
---
- name: Azure Network Interface Management with azure_rm_networkinterface module
  hosts: localhost
  tasks:
    - name: Create a network interface
      azure_rm_networkinterface:
        resource_group: myResourceGroup
        name: myNIC
        virtual_network: myVNet
        subnet: mySubnet
        address_prefix: 10.0.0.0/24
        location: eastus
        state: present

### 3. **Google Cloud Platform (GCP) Management**

#### Example 3.1: `gcp_compute_instance` module
This task creates a virtual machine instance in GCP.

yaml
---
- name: GCP Compute Instance Management with gcp_compute_instance module
  hosts: localhost
  tasks:
    - name: Create a GCP VM instance
      gcp_compute_instance:
        name: my-instance
        machine_type: n1-standard-1
        zone: us-central1-a
        image: debian-cloud/debian-10
        project: my-gcp-project
        auth_kind: serviceaccount
        service_account_file: /path/to/service-account.json
        state: present
#### Example 3.2: `gcp_storage_bucket` module
This task creates a storage bucket in GCP.

yaml
---
- name: GCP Storage Bucket Management with gcp_storage_bucket module
  hosts: localhost
  tasks:
    - name: Create a GCP Storage Bucket
      gcp_storage_bucket:
        name: my-gcs-bucket
        location: US
        project: my-gcp-project
        state: present
### 4. **OpenStack Management**

#### Example 4.1: `os_server` module
This task creates a server instance in OpenStack.

yaml
---
- name: OpenStack Server Management with os_server module
  hosts: localhost
  tasks:
    - name: Create an OpenStack server
      os_server:
        name: my-server
        image: cirros
        flavor: m1.small
        key_name: my-key
        security_groups: my-security-group
        region: my-region
        wait: yes
      register: created_server

    - debug:
        msg: "Created server: {{ created_server.id }}"
#### Example 4.2: `os_network` module
This task creates a network in OpenStack.

yaml
---
- name: OpenStack Network Management with os_network module
  hosts: localhost
  tasks:
    - name: Create an OpenStack network
      os_network:
        name: my-network
        state: present
        provider_network: false
### **Network Modules**

### 1. **Cisco Management**

#### Example 1.1: `ios_config` module
This task configures a Cisco IOS device, such as a router or switch.

yaml
---
- name: Cisco IOS Configuration with ios_config module
  hosts: cisco_devices
  tasks:
    - name: Configure interface on Cisco IOS
      ios_config:
        lines:
          - interface GigabitEthernet0/1
          - ip address 192.168.1.1 255.255.255.0
          - no shutdown
        save: yes
#### Example 1.2: `nxos_config` module
This task configures a Cisco NX-OS device.

yaml
---
- name: Cisco NX-OS Configuration with nxos_config module
  hosts: nxos_devices
  tasks:
    - name: Configure VLAN on Cisco NX-OS
      nxos_config:
        lines:
          - vlan 10
          - name Sales
        save: yes
### 2. **Juniper Management**

#### Example 2.1: `junos_config` module
This task configures a Juniper device.

yaml
---
- name: Juniper Configuration with junos_config module
  hosts: juniper_devices
  tasks:
    - name: Configure interface on Juniper
      junos_config:
        lines:
          - set interfaces ge-0/0/1 unit 0 family inet address 192.168.2.1/24
          - set interfaces ge-0/0/1 unit 0 family inet filter input my-filter
        commit: yes
### 3. **Palo Alto Management**

#### Example 3.1: `panos_security_rule` module
This task configures a security rule on a Palo Alto firewall.

yaml
---
- name: Palo Alto Security Rule Configuration with panos_security_rule module
  hosts: palo_alto
  tasks:
    - name: Configure security rule
      panos_security_rule:
        rule_name: Allow_HTTP
        action: allow
        source:
          - any
        destination:
          - any
        application:
          - web-browsing
        service:
          - service-http
        state: present
### 4. **Arista Management**

#### Example 4.1: `eos_config` module
This task configures an Arista device.

yaml
---
- name: Arista EOS Configuration with eos_config module
  hosts: arista_devices
  tasks:
    - name: Configure interface on Arista EOS
      eos_config:
        lines:
          - interface Ethernet1
          - ip address 10.10.10.1/24
          - no shutdown

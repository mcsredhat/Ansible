sudo apt-get update -y
clear
sudo apt-get install ansible -y
notes "after finish the installation select YES to restart Ubuntu"
ansible --version
### change the terminal for VStudio to WSL UBuntu###
click on terminal---> new Terminal ===>click on + and select Ubuntu (wsl)
mkdir /home/ansible/ansile 
cd ~
explorer.exe . # sometimes not working to drag the file in ansible , click add file ===>network===>type in search ((\\wsl.localhost\Ubuntu\home\ansible))==>>after that select ansile then add.will ask u to give permission to this host click yes
ansible --version =to confirm ansible is installed correctly 

to connect SSH With servers and the windows machine host
open Ubuntu wsl
ls
mkdir .ssh # to create dir to save SSH key pair
explorer.exe .ssh
copy the keypair to .ssh , by draging to .ssh dir
 chmod 400 .ssh/ansible-course-key-pair.pem
 ssh -i .ssh/ansible-course-key-pair.pem ec2-user@54.237.103.59 ===> yes

open new terminal on VStudio 
now create file cold host-dev under ansible dir
# host-dev

[webservers]
3.231.184.2
54.237.103.59
[loadbalancers]
3.225.165.189

[local]
control
save file 
ansible --list-hosts all (([WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that
the implicit localhost does not match 'all'    
  hosts (0):))# because there is no hosts beacuse it is looking in /etc/ansible for the inventory

ansible -i hosts-dev --list-hosts all 
#####################
ansible configuration
#####################
to control our local ansible setting , by creating file called ansible.cfg, will search first enviromenet variable set, then will look for ansible.cfg file, if there is nothing will search in /etc/ansible/ansible.cfg
creat new file called ansible.cfg 
cd ~ 
vi ansible.cfg
# ansible.cfg
[default]
inventory = ./hosts-dev

ansible --list-hosts all # will directly go to this file and search for our inventory with out specified -i (hosts-dev)
ansible --list-hosts webservers # display only the group called webservers
ansible --list-hosts loadbalancers

*****creating alias in inventory files ***
vi hosts-dev
# host-dev

[webservers]
app1 ansible_host=3.231.184.2
app2 ansible_host=54.237.103.59
[loadbalancers]
lb1 ansible_host=3.225.165.189

[local]
control ansible_connect=local

ansible --list-hosts webservers # display only the alias for the group called webservers
ansible --list-hosts loadbalancers# display only the alias for the group called loadbalancers

################
Tasks
################
here will talk about ansible tasks are a way to run ad hoc commands against our inventory in a one-line single executable.

where the command consist of the ansible command , options, ad hosts-pattern ((ansible options <host-pattern> 
for instance 
(( ansible -m ping all )) # this command will ping all hosts are avialable in our inventory 
(( ansible             -m           ping             all ))
      ||                ||           ||               ||
 (((ansible command) (module flag)  (module name)   (inventory) ))
## Remark when run this command will connect locally only to hosts because use the username for local macine, to fix this problem we need to modify the ansible configuration file to give us idea how to connect with these instances.
vi ansible.cfg

# ansible.cfg
[default]
inventory = ./hosts-dev
remote_user = ec2_user # this type of user only with EC2 AWS
private_key_file = ~/.ssh/ansible-course-key-pair.pem
host_key_checking = false 
###windows only users
##[ssh_connection]
#ssh_args = -o ControlMaster=no

rerun the command
ansible -m ping all # will be connect with all hosts
ansible -m shell -a "uname" webservers:loadbalancers
ansible -m command -a "/bin/false" \!local # will look for fialure except local group .

################
Playbooks
#################
Playbook make configuration management easy and gives us the ability to deploy to a multi-machine setup.and also declare configuration orchestrate steps.
we can think of the a playbook as being like a grocery list.
Produce ( salad, starwberries, avocadaes)
Meats (Becon, chicken)
Dairy (chesse milk)
breads (begels tortillas)
where we can groups out our list tasks of playbook lists, such as 
*list out every thing we need to apply to each instances (hosts)
*group our task according to the type of configuration that is being done.
*we use command module and show module to run ad hoc command using ansible.we can rewrite thes moudles and stick them within a playbook

for instance 
we run the ad hoc commane (ansible -m ping all ) , if want run it as a play within a playbook

## create a playbook call it playbooks
cd ansible 
mkdir playbooks && cd playbooks
vi ping.yml
# ping.yml
---
  - hosts: all
    tasks:
      - name: Ping all servers
        action: ping
ansible-palybook ping.yml 
* creating file diplay uname.yml under playbooks dir
vi uname.yml
# uname.yml

---
  - hosts: webservers:loadbalancers
    tasks:
      - name: Get OS type
        shell: uname	
ansible-palybook playbook/uname.yml

update
vi yum-update.yml
# yum-update.yml

---
  - hosts: webservers:loadbalancers
    become: true
    tasks:
      - name: Update yum packages
        yum: name=* state=latest

#####################
playbooks in action
#####################
in this section  , how to use playbooks to construct our system.
will break the construction of our system in three parts, (( package management, configuration, and the service handlers.
*package management= what packages our systems need , depend on how software system runs.like apache , Java,Maven, node, mysql
for instance will install package management called apache on our group called loadbalancers
---
  - hosts: loadbalancers
   tasks:
   - name:install apache
     yum: name=httpd state=latest		

*configuration infrastrcture:what configuration file need to be changed? and specification file to be uploaded or downloaded 
for instance 
in this example will coply the configuration file from our loacl machine src=/etc/config.cfg to loadbalancers dest=/etc/config.cfg
in second part of the code will synchronize the folder from our local machine to webservers
synchronize: src= ./app dest=/var/www/html/app
---
  - hosts: loadbalancers
   tasks:
   - name:copying file
     copy: src:./config.cfg dest:/etc/config.cfg 

- hosts: webservers
   tasks:
   - name:synchronize folder
     synchronize: src:./app dest:/var/www/html/app 		
		
*service Handlers:we make simple configuration change to config file.for instance change the port number to 80.

- hosts: loadbalancers
   tasks:
   - name:configure port number
     lineinfile: path=/etc/config.cfg regex=`^port` line=`port=80`
     notify: balancer apache
   handlers:
   -name: restart apache
    service: name=httpd status=restarted	

######################
constructing system
######################
playbook in actions
1=package management
.apache
.php 
2=configuration
.upload index.php
.configure php.ini
.configure loadbalancer
3=service handlers.
 .restart the services

1:creating file to update all packages
cd ansible/palybooks
vi yum-update.yml
#yum-update.yml

---
  -hosts: webservers:loadbalancers
   become: true # to become as root or sudo
   tasks:
     -name:yum update
      yum: name:* state:latest
save the file 
ansible-palybook playbook/yum-update.yml

REMARK **to avoid creating error file ( retry files) *** open the ansible.cfg and add this line
retry_files_enabled = false
2:create playbook to install all services (appache and PHP), where we gonna install apache and php on webserver and apache only on loadbalancer
cd ansible/playbooks
vi install-services.yml
 # install-services.yml
---
  - hosts: loadbalancers
    become: true
    tasks:
     -name: installing apache
      yum: name:httpd state=present
      -name: Ensure apache starts
       service: named=httpd state=started enable=yes

 - hosts: webservers
    become: true
    tasks:
     -name: installing services apache & php
      yum: 
        name: 
          -httpd
          -PHP  
        state=present
    -name: Ensure apache starts
     service: named=httpd state=started enable=yes
save 

ansible-palybook playbook/install-services.yml

2=configuration and taking care of our systems
*creating simple php index file 
cd ansible/playbooks
vi index.php
<?php
echo " <h1> hello, world! this is my ansible </h1>";
?>
*upload index.php to our webservers
vi setup-app.yml
# setup-app.yml

---
  - hosts: webservers
    become: true
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: /var/www/html
          mode: 0755
      
              
ansible-palybook playbook/setup-app.yml
**confirm the configuration of our web server*** open the web browser and type the IP address of our webservers instances to confirm the configuration.


*.configure php.ini
go to index.php and delete PHP word in first line
add theses lines to file setup-app.yml

# setup-app.yml

---
  - hosts: webservers
    become: true
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: /var/www/html
          mode: 0755
      
      - name: Configure php.ini file
        lineinfile:
          path: /etc/php.ini
          regexp: ^short_open_tag
          line: 'short_open_tag=On'

      - name: restart apache
        service: name=httpd state=restarted
         

ansible-palybook playbook/setup-app.yml
**confirm the configuration of our web server*** open the web browser and type the IPs addresses of our webservers instances to confirm the configuration.

**.configure loadbalancer**0404
cd ansible
mkdir config && cd config
vi lb-config.j2
ProxyRequests off
<Proxy balancer://webcluster >
  {% for hosts in groups['webservers'] %}
    BalancerMember http://{{hostvars[hosts]['ansible_host']}}
  {% endfor %}
    ProxySet lbmethod=byrequests
</Proxy>

# Optional
<Location /balancer-manager>
  SetHandler balancer-manager
</Location>

ProxyPass /balancer-manager !
ProxyPass / balancer://webcluster/
save
**create new file in our palybooks called setup-lb.yml
vi setup-lb.yml
# setup-lb.yml

--- 
  - hosts: loadbalancers
    become: true 
    tasks:
      - name: Creating template
        template:
          src: ../config/lb-config.j2
          dest: /etc/httpd/conf.d/lb.conf
          owner: bin
          group: wheel
          mode: 064

      - name: restart apache
        service: name=httpd state=restarted 
***SAVE:wq!****
ansible-playbook playbook/setup-lb.yml
**confirm the configuration of our loadbalancers*** open the web browser and type the IP address of our loadbalancers instance to confirm the configuration.
loadbalancers' ip-address/balancer-manager

################
service handlers 0405
################
vi setup-app.yml
#setup-app.yml
---
  - hosts: webservers
    become: true
    tasks:
     - name:Uploading application file
        copy: 
    	   src: ../index.php 
    	   dest:/var/www/html
     	   mode: 0755

	- name:confgure php.ini file
        copy: 
    	   lineinfile:  
    	   path:/etc/php.ini
     	   regexp: ^short_open_tag
	   line: `short_open_tag=on`
	
	   -name: restart apache 
    	 service: named=httpd state=restarted 


ansible-playbook playbook/setup-app.yml # when we run it will restart apache every time even there is no change in configuration , to solve this problem must be add service handlers to deal with it.by adding notification to handlers 
vi setup-app.yml
#setup-app.yml
---
  - hosts: webservers
    become: true
    tasks:
     - name:Uploading application file
        copy: 
    	   src: ../index.php 
    	   dest:/var/www/html
     	   mode: 0755

	- name:confgure php.ini file
        copy: 
    	   lineinfile:  
    	   path:/etc/php.ini
     	   regexp: ^short_open_tag
	   line: `short_open_tag=on`
	   notify: restart apache
	handlers:	
	   -name: restart apache 
    	     service: named=httpd state=restarted 

ansible-playbook playbook/setup-app.yml # there is no restart status for httpd server , because there is no change 
** go to change file setup-lb.yml 
# setup-app.yml

---
  - hosts: webservers
    become: true
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: /var/www/html
          mode: 0755
      
      - name: Configure php.ini file
        lineinfile:
          path: /etc/php.ini
          regexp: ^short_open_tag
          line: 'short_open_tag=On'
        notify: restart apache

    handlers:
      - name: restart apache
        service: name=httpd state=restarted
***SAVE:wq!****
ansible-playbook playbook/setup-lb.yml

#####################
congregate Playbooks 0406
#####################
create new file call check status
vi check-status.yml 
# check-status.yml
---
  - hosts: webservers:loadbalancers
    become: true
    tasks:
      - name: Check status of apache
        command: service httpd status
**save
ansible-playbook playbook/check-status.yml
***stop apache on loadbalancer using ad hoc command
ansible -m service -a "name=httpd state=stopped" --become loadbalancers
after that rerun the chech-status.yml to confirm the changes
ansible-playbook playbook/check-status.yml
**start apache on loadbalancer using ad hoc command
ansible -m service -a "name=httpd state=started" --become loadbalancers
ansible-playbook playbook/check-status.yml

in this section will run single playbooks to congregate all playbooks , 
cd ansible/playbooks
vi all-playbooks.yml

# all-playbooks.yml
---
  - import_playbook: yum-update.yml
  - import_playbook: install-services.yml
  - import_playbook: setup-app.yml
  - import_playbook: setup-lb.yml
  - import_playbook: check-status.yml
*save
ansible-playbook playbook/all-playbooks.yml # when run this command will import all yml files and execution simultancely 

########################
Using Variables in our playbooks 0501
########################
ansible create variable call (Gathering Facts), where this variables holds all kinds of information and metadata about the hosts.by running ad hoc command to get all informations about the variables.
for instnace ad hoc command (( ansible -m setup app1)
for instance playbook

name: add webserver info
copy:
dest: /var/www/info.php
content: "{{ ansible_hostname }}" # this is syntax from jinj2 , 
the other way to create variables are creating local variables in our playbooks or import the variables from another files.
for example 
vers:
path_to_app: "/var/www/html"
another_variables: "something else"
tasks:
-name
copy:
dest: "{{path_to_app}}/info/php"
content: "<h1>Hello, world!</h1>"
instead of repeate the same word in our syntax , we can identified as variables and then put the variables in syntax , where will import the value of the variables.
where be able to use jinja2 to evaluate our experssions
example using ad hoc command 
ansible -m setup app1

it allows us to inject variables within our playbooks and then jinja2 templating evaulate accordingly 
for instance 
name; add webserver info
copy: 
dest: /var/www/html/info/php
content: "{{ ansible_hostname }}"
by using ad hoc command be able to disply all variables and metadata
ansible -m setup app1
open steup-app.yml to modify the file and identifying the variables
vi steup-app.yml
# setup-app.yml

---
  - hosts: webservers
    become: true
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: /var/www/html
          mode: 0755

      - name: Create simple info page
        copy:
          dest: /var/www/html/info.php
          content: "<h1> Info about our webserver {{ ansible_hostname }} </h1>"

      - name: Configure php.ini file
        lineinfile:
          path: /etc/php.ini
          regexp: ^short_open_tag
          line: 'short_open_tag=On'
        notify: restart apache

    handlers:
      - name: restart apache
        service: name=httpd state=restarted
        
***SAVE:wq!****
ansible-playbook playbooks/setup-app.yml
open the web browser and type the ip address for loadbalancers/info.php and do refresh everytime
rerun the setup module with ad hoc command  
ansible -m setup app1

####################
vars dictionary 0502
####################
identifying the variables are creating local variables in our playbooks or import the variables from another files.
for example 
vers:
path_to_app: "/var/www/html"
another_variables: "something else"
tasks:
-name
copy:
dest: "{{path_to_app}}/info/php"
content: "<h1>Hello, world!</h1>"
**********************
vi steup-app.yml
# setup-app.yml

---
  - hosts: webservers
    become: true

    vars:
      path_to_app: "/var/www/html"
 
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: "{{ path_to_app }}"
          mode: 0755

      - name: Create simple info page
        copy:
          dest: "{{ path_to_app }}/info.php"
          content: "<h1> Info about our webserver {{ ansible_hostname }} </h1>"

      - name: Configure php.ini file
        lineinfile:
          path: /etc/php.ini
          regexp: ^short_open_tag
          line: 'short_open_tag=On'
        notify: restart apache

    handlers:
      - name: restart apache
        service: name=httpd state=restarted
        
***SAVE:wq!****
ansible-playbook playbooks/setup-app.yml

####################
Registered variables 0503
####################
creat variables from info retuerned from tasks run using register, by using register value be able to save the variable in it.
for instance 
---
vers:
	path_to_app: "/var/www/html"
tasks:
- name: see directory contents
comand: ls -la {{ path_to_app }} 
register: dir_contents # save the result of listing the dir 
-name: debug directory contents
debug:
msg: "{{dir_contents}}" # print the contents of this module
********
will create task to list all contents of dir /var/www/html
vi steup-app.yml
# setup-app.yml

---
  - hosts: webservers
    become: true

    vars:
      path_to_app: "/var/www/html"
 
    tasks:
      - name: Upload application file
        copy:
          src: ../index.php
          dest: "{{ path_to_app }}"
          mode: 0755

      - name: Create simple info page
        copy:
          dest: "{{ path_to_app }}/info.php"
          content: "<h1> Info about our webserver {{ ansible_hostname }} </h1>"

      - name: See directory contents
        command: ls -la {{ path_to_app }}
        register: dir_contents

      - name: Debug directory contents
        debug:
          msg: "{{ dir_contents }}"

      - name: Configure php.ini file
        lineinfile:
          path: /etc/php.ini
          regexp: ^short_open_tag
          line: 'short_open_tag=On'
        notify: restart apache

    handlers:
      - name: restart apache
        service: name=httpd state=restarted
        
***SAVE:wq!****
ansible-playbook playbooks/setup-app.yml

####################
ROLES 0601 itis very important this part, concentrat well on it.
####################
When our applications are growing up and more team members come onto our team , where ansible offers the ability to create roles within our ansible setup that allows us to containerize our varaibles , tasks, and templates to make them fully independent of one another.
* create standard for folder structure so anyone that run our playbooks, or run ansible setup.
*******
group tasks together in a way that is self containing.
clean and pre-define directory strcture.
break up the configuration into files.
reuse code by other who need similar configuration.
esay to modify and reduces syntax errors.
**
instance of directory strcture , where must have folder for each of configuration like tasks,vars,and handlers, where all configuration folder has file call main.yml
ansible give us the ability to create and initialize the this folder strcture by running the command ((ansible-galaxy)) 
mkdir ansible-roles && ansible-roles && mkdir roles
$ansible-galaxy role init roles/webservers
*******
steup-app.yml
roles/
   webservers/
     tasks/
	- main.yml
     vars/
	 - main.yml
	handlers/
	  - main.yml
*******************
1:create new directory call roles and after creation copy all tasks, variables,handlers and .. etc, from our configuration files *.yml all in related file.for instance tasks will be copied under roles/tasks/main.yml and so on.
cd ansible
mkdir roles
$ansible-galaxy role init roles/webservers
ls roles
open the folder call tasks (( cd tasks))

will start with steup-app.yml,and copy the tasks and variables,handlers, under there related folders. 
* move the index.php to file folder under roles , and modify the path index.php under tasks folder and change it to ../folders/index.php.
* remove all tasks and variables, handlers from file setup-app.yml.after that we have to specify the roles in files steup-app.yml , by adding this syntax(( roles: -webservers))
after the modification the files and break all contents in related files , the steup-app.yml will look like this. (( for more info look at 0601 ))
vi steup-app.yml
#setup-app.yml
---
  - hosts: webservers
    become: true
    roles: 
	-webservers	 
***SAVE:wq!****
ansible-playbook playbooks/setup-app.yml

#################
check mode
#################
allow us to run the code and report us of any change that ansible would have to make on the end hosts rather than applying the changes.
for instnce run dry run exection (( ansible-playbook setup-app.yml --check ))
in this section will use our original setup-app.yml

*remove the contents for see directory contens and debug contents 
*modify the conent of simple info page by adding "these are changes" 
save the file , then run the command 
 ansible-playbook setup-app.yml --check # will detect the changes , and wont apply to our webservers.to confirm that open the browser and type the ip address/info/php

#################
Error Handling 0603
#################
Error Handling in Playbooks, the change the default behaviour of ansible when certain events happen that may or my not need to report as a fauilar or changed status.
no need to report if non zero exit code.
*sometime a non-zero exit code is a-okay
*sometimes commands might not always need to report a changed status.
*explicitly force ansible to ignore errors or changes that occur.

for instance
open the file call check-status.yml under palybooks folder
vi check-status.yml
# check-status.yml
---
  - hosts: webservers:loadbalancers
    become: true
    tasks:
      - name: Check status of apache
        command: service httpd status
        args:
            warn: no
        changed_when: false

      - name: This will not fail
        command: /bin/false
        ignore_errors: yes
***SAVE:wq!****
ansbile-palybook playbooks/check-status.yml

#################
Tags 0604
#################
assign tags to specific tasks in playbooks allows you to only call certain tasks in a vary long playbook.
you can apply the tags:
*only run specific parts of a playbooks rather than all plays.
* add tags to any tasks and reuse if needed.
specify the tags you want to run (or not run) on the command line.
vi steup-app.yml
#setup-app.yml
---
  - hosts: webservers
    become: true
	vers:
	path_to_app: "/var/www/html"
	##another_variables: "something else"

    tasks:
     - name:Uploading application file
        copy: 
    	   src: ../index.php 
    	   dest:"{{path_to_app}}"
     	   mode: 0755
	 tags: upload
	
	vers:
	path_to_app: "/var/www/html"
	tasks:
	- name: see directory contents
	comand: ls -la {{ path_to_app }} 
	register: dir_contents # save the result of listing the dir in dir_contents
	-name: debug directory contents
	debug:   # debug use to disply the value of register 
	msg: "{{dir_contents}}" 

	- name:create simple info page
        copy:
		dest: "{{path_to_app}}/info.php"
		content: "<h1> info about our webserver {{ ansible_hostname}} </h1>"
	   tags: create

	- name:confgure php.ini file
        copy: 
    	   lineinfile:  
    	   path:/etc/php.ini
     	   regexp: ^short_open_tag
	   line: `short_open_tag=on`
	   notify: restart apache
	handlers:	
	   -name: restart apache 
    	     service: named=httpd state=restarted 
***SAVE:wq!****
$ ansible-playbook playbooks/setup-app.yml --tags upload # will run only task , that has tags=upload and escap the rest.
ansible-playbook playbooks/setup-app.yml --skip-tags upload # will run all tasks, and escap the tags=upload only.

#################
Ansible Vault 0605
#################
ansible "Valut" is a way to keep sensitive information in encrypted files, rather than plain text, in your playbooks.
*keep passwords, keys, and senstive variables in encrypted valut files.
*valut files can be shared through source control.
*valut can encrypt pretty much any data strcture file used by ansible.
*password protected and the default cipher is AES.
 we can use the following command to create secret valut
ansible-valut create secret-variables.yml
prompt the password
ansible-playbook setup-app.yml --ask-valut-pass # create the password for palybooks
***
create folder called var ,this will be the location of our encrypted file, that will hold a super secret password in.
mkdir vars
ansible-valut create vars/secret-variables.yml
New valut password= root
confirm new valut password= root
will open file , where will add the variables that holds our super secret password.
secret_passwprd: "supersecretpassword123"
save it by :wq!
cat vars/secret-variables.yml
if you want to edit the files after encrypted 
ansible-valut edit vars/secret-variables.yml
will open the vi editor press:q!
will open the secret-variables.yml with out encrypted, to modify or edit the file.
by identifying the path of variables files ((vers_files:
	  - ../vars/secret-variables.yml))


#setup-app.yml
---
  - hosts: webservers
    become: true
	vers:
	path_to_app: "/var/www/html"
	##another_variables: "something else"
	vers_files:
	  - ../vars/secret-variables.yml
	tasks:
	-name: secret password here
	debug:   # debug use to disply the value of register 
	msg: "{{secret_password }}" 
	

    tasks:
     - name:Uploading application file
        copy: 
    	   src: ../index.php 
    	   dest:"{{path_to_app}}"
     	   mode: 0755
	 tags: upload
	
	vers:
	path_to_app: "/var/www/html"
	tasks:
	- name: see directory contents
	comand: ls -la {{ path_to_app }} 
	register: dir_contents # save the result of listing the dir in dir_contents
	-name: debug directory contents
	debug:   # debug use to disply the value of register 
	msg: "{{dir_contents}}" 

	- name:create simple info page
        copy:
		dest: "{{path_to_app}}/info.php"
		content: "<h1> info about our webserver {{ ansible_hostname}} </h1>"
	   tags: create

	- name:confgure php.ini file
        copy: 
    	   lineinfile:  
    	   path:/etc/php.ini
     	   regexp: ^short_open_tag
	   line: `short_open_tag=on`
	   notify: restart apache
	handlers:	
	   -name: restart apache 
    	     service: named=httpd state=restarted 
***SAVE:wq!****
ansible-playbook playbooks/setup-app.yml # error attemting to decrypted but no valut secret found.
to run this playbooks will recommand to specify some password.
ansible-playbook --ask-valut-pass playbooks/setup-app.yml 
valut password: root after that will run it successfuly 

#################
Prompts 0606
#################
there may be playbooks you run that need to prompt the user for certain input; you can do this using the 'vars_prompt' section.
* can use the users input as variables within our palybooks.
*run certain task with conditional logic.
*common use is to ask for senstive data.
*has uses outside of secuirty as well.
#setup-app.yml
---
  - hosts: webservers
    become: true
	vers:
	path_to_app: "/var/www/html"
	##another_variables: "something else"
	##vers_files:
	 ## - ../vars/secret-variables.yml
	tasks:
	##-name: secret password here
	##debug:   # debug use to disply the value of register 
	##msg: "{{secret_password }}" 

	vers_prompt:
	 -name: "upload_var"
	  prompt: "Upload index.php file?"
	 -name: "upload_var"
	  prompt: "create info.php page ?"

    tasks:
     - name:Uploading application file
        copy: 
    	   src: ../index.php 
    	   dest:"{{path_to_app}}"
	    mode: 0755
	  when: upload_var == 'yes'
	  tags: upload
	
	vers:
	path_to_app: "/var/www/html"
	tasks:
	- name: see directory contents
	comand: ls -la {{ path_to_app }} 
	register: dir_contents # save the result of listing the dir in dir_contents
	-name: debug directory contents
	debug:   # debug use to disply the value of register 
	msg: "{{dir_contents}}" 

	- name:create simple info page
        copy:
		dest: "{{path_to_app}}/info.php"
		content: "<h1> info about our webserver {{ ansible_hostname}} </h1>"
		 when: upload_var == 'yes'
	   tags: create

	- name:confgure php.ini file
        copy: 
    	   lineinfile:  
    	   path:/etc/php.ini
     	   regexp: ^short_open_tag
	   line: `short_open_tag=on`
	   notify: restart apache
	handlers:	
	   -name: restart apache 
    	     service: named=httpd state=restarted 
***SAVE:wq!****

ansible-playbook playbooks/setup-app.yml 
upload the index.php file?: 
create info.php page ?:
if you type no will escap it, if yes will run it.


